intList = list(map(int, input().split()))
print(intList)
#print(intList[0] + 1)

# Нахрена так много кода?
# Короче говоря, у нас есть input. Если мы введем в обычный input, например, 1 2 3, то вывод будет: 1 2 3,
# потому что мы считали 1 2 3 как строку со всеми пробелами. Допустим, мы хотим чтобы числа 1, 2, 3 стали
# элементами листа (т.е. массива) и к каждому из них можно было бы удобно обращаться отдельно. Тогда мы пишем
# input.split() и наши символы разделяются по пробелам, то есть мы получаем ['1', '2', '3'].
# Но элементы в этом листе все еще хранятся как строки, т.е. мы не можем к первому элементу прибавить 1.
# Поэтому мы пытаемся применить int к нашему выражению, но в один int нельзя положить целый массив, мы
# получим ошибку. Поэтому нам нужна функция map, она позволяет объединить наш input.split() и int, чтобы каждый элемент
# массива стал объектом типа int. Но сама по себе map не хранит значения, поэтому нам нужно замкнуть круг и заключить
# все что мы получили обратно в list, написав его в начале выражения. Так мы получим лист объектов типа int, без пробелов
# которые существовали при вводе [1, 2, 3] и сможем выполнять арифметические операции с любым элементом этого листа.
#

print(' '.join(map(str, intList)))

# Чтобы затем вывести числа не в виде [1, 2, 3], а в том, котором нам нужно, мы можем воспользоваться ф-цией join,
# которая должна соединить наши эелементы, оставив между ними пробел, т.е. вывести 1 2 3. Однако join работает
# только с объектами типа str, а мы только что чуть не сошли с ума, превращая наш исходный str в int.
# Но не беда! ф-ция map опять приходит на помощь и превращает все объекты нашего листа из int в str. После этого
# join начинает работать и все выводится. Хотя вот почему здесь не надо опять все это в конце в лист засовывать я
# до конца не понимаю. Опустим.
